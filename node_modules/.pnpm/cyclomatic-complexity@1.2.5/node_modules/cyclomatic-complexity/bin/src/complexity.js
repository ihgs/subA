"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateComplexity = calculateComplexity;
const esprima = __importStar(require("esprima"));
function calculateComplexity(code) {
    try {
        const ast = esprima.parseScript(code, { loc: true, jsx: true });
        let functionComplexities = [
            { name: "global", complexity: 0, line: 0 },
        ];
        let functionStack = [
            { name: "global", complexity: 1, line: 0 },
        ];
        let definedFunctions = new Set();
        let fatherName = "";
        function traverse(node) {
            switch (node.type) {
                case "FunctionDeclaration":
                    if (node.id) {
                        definedFunctions.add(node.id.name);
                        const newFunction = { name: node.id.name, complexity: 1, line: node.loc.start.line };
                        functionStack.push(newFunction);
                        functionComplexities.push(newFunction);
                    }
                    break;
                case "FunctionExpression":
                case "ArrowFunctionExpression":
                    definedFunctions.add(fatherName);
                    const newFunction = { name: `anonymous: ${fatherName}`, complexity: 1, line: node.loc.start.line };
                    functionStack.push(newFunction);
                    functionComplexities.push(newFunction);
                    break;
                case "CallExpression":
                    if (node.callee.type === "Identifier") {
                        const functionName = node.callee.name;
                        const functionDetail = functionStack.find((f) => f.name === functionName);
                        if (!definedFunctions.has(functionName)) {
                            functionStack[functionStack.length - 1].complexity++;
                        }
                    }
                    break;
                case "IfStatement":
                case "ForStatement":
                case "WhileStatement":
                case "DoWhileStatement":
                case "SwitchCase":
                    functionStack[functionStack.length - 1].complexity++;
                    break;
                case "ConditionalExpression":
                    functionStack[functionStack.length - 1].complexity++;
                    break;
                case "LogicalExpression":
                    functionStack[functionStack.length - 1].complexity +=
                        node.operator === "&&" || node.operator === "||" ? 1 : 0;
                    break;
                case "CatchClause":
                    functionStack[functionStack.length - 1].complexity++;
                    break;
                default:
                    break;
            }
            for (const key in node) {
                if (node.hasOwnProperty(key)) {
                    const child = node[key];
                    if (typeof child === "object" && child !== null) {
                        if (node.type === "Identifier") {
                            fatherName = node.name;
                        }
                        traverse(child);
                    }
                }
            }
            if (node.type === "FunctionDeclaration" ||
                node.type === "FunctionExpression" ||
                node.type === "ArrowFunctionExpression") {
                functionStack.pop();
            }
        }
        traverse(ast);
        return functionComplexities;
    }
    catch (e) {
        return [];
    }
}
//# sourceMappingURL=complexity.js.map