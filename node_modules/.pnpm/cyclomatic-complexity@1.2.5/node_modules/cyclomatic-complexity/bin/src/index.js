#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const extra_typings_1 = require("@commander-js/extra-typings");
const complexity_1 = require("./complexity");
const glob_1 = require("glob");
const fs_1 = __importDefault(require("fs"));
const typescript_1 = __importDefault(require("typescript"));
const program = new extra_typings_1.Command();
program
    .name("code-complexity")
    .description("Calculates code complexity of given files")
    .argument("<pattern>", "Glob pattern for files to check")
    .option("-tw, --threshold-warnings <number>", "Threshold for warnings", "10")
    .option("-te, --threshold-errors <number>", "Threshold for errors", "20")
    .option("-j, --json", "Output as JSON", false)
    .option("-e, --exclude <pattern>", "Exclude pattern", "**/node_modules/**")
    .action((pattern_1, _a) => __awaiter(void 0, [pattern_1, _a], void 0, function* (pattern, { thresholdWarnings, thresholdErrors, json, exclude }) {
    function getComplexityLevel(complexity) {
        if (complexity >= Number(thresholdErrors)) {
            return "error";
        }
        else if (complexity >= Number(thresholdWarnings)) {
            return "warning";
        }
        else {
            return "ok";
        }
    }
    let files = (0, glob_1.globSync)(pattern, {
        ignore: exclude,
    });
    let filesComplexity = [];
    for (const file of files) {
        if (!file.endsWith(".ts") && !file.endsWith(".js") && !file.endsWith(".jsx") && !file.endsWith(".tsx")) {
            continue;
        }
        const fileContent = fs_1.default.readFileSync(file, "utf-8");
        const result = typescript_1.default.transpileModule(fileContent, {
            compilerOptions: {
                module: typescript_1.default.ModuleKind.CommonJS,
            },
        });
        const functionComplexities = (0, complexity_1.calculateComplexity)(result.outputText);
        const highestComplexity = functionComplexities.reduce((prev, current) => prev.complexity > current.complexity ? prev : current, { name: "", complexity: 0 });
        let complexityLevel = getComplexityLevel(highestComplexity.complexity);
        filesComplexity.push({
            file,
            functionComplexities: functionComplexities.sort((a, b) => b.complexity - a.complexity),
            complexityLevel,
            complexitySum: functionComplexities.reduce((prev, current) => prev + current.complexity, 0),
        });
    }
    const errors = filesComplexity.filter((f) => f.complexityLevel === "error");
    const warnings = filesComplexity.filter((f) => f.complexityLevel === "warning");
    const none = filesComplexity.filter((f) => f.complexityLevel === "ok");
    const sorted = [
        ...none.sort((a, b) => b.complexitySum - a.complexitySum),
        ...warnings.sort((a, b) => b.complexitySum - a.complexitySum),
        ...errors.sort((a, b) => b.complexitySum - a.complexitySum),
    ];
    if (json) {
        console.log(JSON.stringify(filesComplexity, null, 2));
        return;
    }
    for (const file of sorted) {
        console.log(`\n${file.file}: ${file.complexitySum} (${file.complexityLevel.toUpperCase()})`);
        for (const functionComplexity of file.functionComplexities) {
            console.log(`  [line: ${functionComplexity.line}] ${functionComplexity.name}: ${functionComplexity.complexity} (${getComplexityLevel(functionComplexity.complexity).toUpperCase()})`);
        }
    }
    if (errors.length === 0 && warnings.length === 0) {
        console.log("No issues found");
    }
    if (errors.length > 0 || warnings.length > 0) {
        console.log(`Found ${errors.length} files with high complexity and ${warnings.length} files with moderate complexity`);
        if (errors.length > 0) {
            process.exit(1);
        }
    }
}))
    .parse(process.argv);
//# sourceMappingURL=index.js.map